<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Analytic Hierarchy Process</title>
    <meta charset="UTF-8" />
    <script type="text/javascript" src="Scripts/jquery-2.1.1.min.js"></script>
    <script
      type="module"
      src="https://unpkg.com/chart.js@4.2.1/dist/chart.umd.js"
    ></script>

    <script src="Scripts/jquery.table2excel.js"></script>

    <script type="text/javascript">
      //OMER HADAR MARCH 23

      var Util = function () {};

      Util.storeLastMove = function () {
        localStorage.setItem("connections", JSON.stringify(connections));
        localStorage.setItem("values", JSON.stringify(values));
      };

      Util.store = function (name) {
        localStorage.setItem(
          name + "_connections",
          JSON.stringify(connections)
        );
        localStorage.setItem(name + "_values", JSON.stringify(values));
      };

      Util.getNames = function () {
        return JSON.parse(localStorage.getItem("names"));
      };

      Util.setNames = function (names) {
        localStorage.setItem("names", JSON.stringify(names));
      };

      Util.restore = function (name) {
        Util.storeLastMove();
        connections = JSON.parse(localStorage.getItem(name + "_connections"));
        values = JSON.parse(localStorage.getItem(name + "_values"));
        refresh();
      };

      Util.deleteName = function (name) {
        localStorage.removeItem(name + "_connections");
        localStorage.removeItem(name + "_values");
        arr = Util.getNames();
        var filteredArray = arr.filter((e) => e !== name);
        Util.setNames(filteredArray);
      };

      // init

      var values = new Array();
      var connections = new Array();
      let max_moves = 2;
      let current_configs;
      let current_matrix;
      var minid;
      var minallid;
      var output;
      $(document).ready(function () {
        $(document).on("click", "#changeall", function () {
          Util.storeLastMove();
          var arr = output[minallid];
          Util.apply();
          for (i = 0; i < connections.length; i++)
            connections[i].delta =
              parseInt(connections[i].delta) + eval(arr[i]);
          refresh();
        });
        $(document).on(
          {
            mouseenter: function () {
              var arrayofchange = output[minallid];
              for (i = 0; i < connections.length; i++) {
                var selector = connections[i].input;
                var b = parseInt(arrayofchange[i]);
                var val = $("#" + selector).val();
                console.log(val);
                if (val.toString().includes("/")) {
                  newVal = parseInt(val.split("/")[1]) + b;
                  $("#" + selector).val("1/" + newVal.toString());
                } else {
                  $("#" + selector).val(eval(connections[i].delta) + b);
                }
                if (b != 0) $("#" + selector).css("background", "yellow");
              }
            },
            mouseleave: function () {
              var arrayofchange = output[minallid];
              for (i = 0; i < connections.length; i++) {
                var selector = connections[i].input;
                var val = $("#" + selector).val();
                if (val.toString().includes("/")) {
                  $("#" + selector).val("1/" + connections[i].delta.toString());
                } else {
                  $("#" + selector).val(eval(connections[i].delta));
                }
                $("#" + selector).css("background", "#f1f1f1");
              }
            },
          },
          "#changeall"
        );
        $("#firstval").focus();
        $("#firstval").keydown(function (e) {
          if (e.keyCode == 13) {
            e.preventDefault();
            if ($("#firstval").val() != "") $("#addval").click();
            else alert("Please enter a value");
            $("#firstval").val("");
          }
        });
        $("#addval").click(function () {
          $("#ci").remove();
          if ($("#firstval").val() === "") {
            alert("Please enter a value");
          } else {
            pushvalue($("#firstval").val());
            $("#firstval").val("");
          }
        });
        $("#reset").click(function () {
          Util.storeLastMove();
          values.length = 0;
          connections.length = 0;
          refresh();
          $("table").remove();
        });

        $("#undo").click(function () {
          refresh(true);
        });

        $("#dwn-btn").on("click", function () {
          downloadCSV();
          // buildtableforexcel();
          // $(".excel").table2excel({
          //   // exclude CSS class

          //   exclude: ".noEXL",

          //   name: "AHP",

          //   filename: "AHP Export", //do not include extension

          //   fileext: ".xls", // file extension
          //   preserveColors: true,
          // });
        });
      });

      function pushvalue(a) {
        Util.storeLastMove();
        var ok = 0;
        var value;
        for (i = 0; i < values.length; i++) {
          if (values[i].name == a) {
            ok = 1;
          }
        }

        if (ok == 0) {
          var aname = a;
          a = a.replace(/ /g, "-");
          values.push({ id: a, name: aname, value: 9, num: values.length + 1 });
        }

        for (i = 0; i < values.length - 1; i++)
          connections.push({
            value1: values[i].id,
            value2: a,
            delta: 0,
            mode: "regular",
            input: values[i].id + "_" + a + "input",
          });

        $("svg").remove();
        $(".buttons").remove();
        buildtable();
        //sumColunm(connections);
        refresh();
      }
      function getColorById(n) {
        return choosecolor(
          values.filter(function (a) {
            return a.id == n;
          })[0].num - 1
        );
      }

      function getColorByName(n) {
        return choosecolor(
          values.filter(function (a) {
            return a.name === n;
          })[0].num - 1
        );
      }

      //checks if there is a connection between 2 vars
      function istherecon(a, b, cons) {
        for (k = 0; k < cons.length; k++) {
          if (cons[k].value1 == a && cons[k].value2 == b) return 1;
        }
        return 0;
      }
      //colors for lines
      function choosecolor(a) {
        if (a == 0) return "#bae1ff";
        if (a == 1) return "#baffc9";
        if (a == 2) return "#ffffba";
        if (a == 3) return "#ffdfba";
        if (a == 4) return "#ffb3ba";
        if (a == 5) return "#0082e6";
        if (a == 6) return "#00cc2c";
        return "silver";
      }
      function changeValues(firstValueID, secondValueID, delta) {
        var firstVal = values.filter(function (a) {
          return a.id == firstValueID;
        })[0];
        var secondVal = values.filter(function (a) {
          return a.id == secondValueID;
        })[0];
        if (firstVal.num == 1) {
          secondVal.value = firstVal.value - delta;
        }
        if (secondVal.num == 1) {
          firstVal.value = secondVal.value + delta;
        }
      }

      function createConnection(ev) {
        Util.storeLastMove();
        var id = ev.target.id;
        id = id.substring(0, id.length - 5);
        var firstvalue = id.split("_")[0];
        var secondvalue = id.split("_")[1];
        var delta = $("#" + id + "input").val();
        connenction = connections.filter(function (a) {
          return (
            (a.value1 == firstvalue && a.value2 == secondvalue) ||
            (a.value1 == secondvalue && a.value2 == firstvalue)
          );
        });
        if (connenction.length > 0) {
          if (connenction[0].value1 === firstvalue) {
            if (eval(delta) >= 1)
              connenction[0].delta = $("#" + id + "input").val();
            else {
              delta = 1 / eval($("#" + id + "input").val());
              connenction[0].delta = delta;
              connenction[0].value1 = secondvalue;
              connenction[0].value2 = firstvalue;
              values.filter(function (a) {
                return a.id == secondvalue;
              })[0].value = values.filter(function (a) {
                return a.id == firstvalue;
              })[0].value;
              delta = delta * -1;
            }
          } else {
            if (eval(delta) >= 1) {
              connenction[0].delta = $("#" + id + "input").val();
              connenction[0].value1 = firstvalue;
              connenction[0].value2 = secondvalue;
              values.filter(function (a) {
                return a.id == firstvalue;
              })[0].value = values.filter(function (a) {
                return a.id == secondvalue;
              })[0].value;
            } else {
              delta = 1 / eval($("#" + id + "input").val());
              connenction[0].delta = delta;
              delta = delta * -1;
            }
          }
        }

        if (
          $("#" + id + "input").val() != 1 &&
          values.filter(function (a) {
            return a.id == firstvalue;
          })[0].num == 1
        )
          values.filter(function (a) {
            return a.id == secondvalue;
          })[0].value =
            values.filter(function (a) {
              return a.id == firstvalue;
            })[0].value - delta;
        else if (
          values.filter(function (a) {
            return a.id == firstvalue;
          })[0].num == 1
        )
          values.filter(function (a) {
            return a.id == secondvalue;
          })[0].value = values.filter(function (a) {
            return a.id == firstvalue;
          })[0].value;
        // if (eval($("#" + id + "input").val()) < 1)
        //  values.sort(function (a, b) { return b.value - a.value });

        refresh();
      }
      //TODO: delete
      function matrixTable(arrconnections) {
        var deltafortablel;
        var matrix = new Array(values.length);
        for (i = 0; i < values.length; i++)
          matrix[i] = new Array(values.length);

        for (i = 0; i < values.length; i++) {
          for (j = 0; j < values.length; j++) {
            matrix[i][j] = 0;
            if (i == j) matrix[i][j] += 1;
            else if (
              istherecon(values[i].name, values[j].name, arrconnections) == 1
            ) {
              deltafortablel = arrconnections.filter(function (a) {
                return a.value1 == values[i].name && a.value2 == values[j].name;
              })[0].delta;
              matrix[i][j] += eval(deltafortablel);
            } else if (
              istherecon(values[j].name, values[i].name, arrconnections) == 1
            )
              matrix[i][j] +=
                1 /
                eval(
                  arrconnections.filter(function (a) {
                    return (
                      a.value1 == values[j].name && a.value2 == values[i].name
                    );
                  })[0].delta
                );
          }
        }
        console.log("matrix:");
        console.log(matrix);
        return matrix;
      }

      // for matrix table
      function buildtable() {
        $(".tableresults").remove();
        var deltafortablel;
        var table = "";
        var id;
        table += "<table class='tableresults cons'>";
        table += "<tr>";
        table += "<td></td>";
        for (i = 0; i < values.length; i++)
          table +=
            "<td style='background:" +
            choosecolor(values[i].num - 1) +
            "'>" +
            values[i].name +
            "</td>";

        table += "</tr>";
        for (i = 0; i < values.length; i++) {
          table += "<tr>";
          table += "<td>" + values[i].name + "</td>";
          for (j = 0; j < values.length; j++) {
            if (i == j) table += "<td>1</td>";
            else if (i < j) {
              try {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[i].name && a.value2 == values[j].name
                  );
                })[0].delta;
              } catch {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[j].name && a.value2 == values[i].name
                  );
                })[0].delta;
                deltafortablel = 1 / deltafortablel;
              }

              id = values[i].id + "_" + values[j].id + "input";

              if (deltafortablel == 0)
                table +=
                  "<td><select class='redback' onchange='createConnection(event)' id='" +
                  id +
                  "' height='20vh'>";
              else
                table +=
                  "<td><select onchange='createConnection(event)' id='" +
                  id +
                  "' height='20vh'>";
              for (k = -9; k < 10; k++) {
                if (k < 0 && k != -1) {
                  if (eval(deltafortablel) == 1 / (k * -1))
                    table +=
                      " <option selected='true' value='1/" +
                      k * -1 +
                      "'>1/" +
                      k * -1 +
                      "</option>";
                  else
                    table +=
                      " <option value='1/" +
                      k * -1 +
                      "'>1/" +
                      k * -1 +
                      "</option>";
                } else if (k != -1) {
                  if (deltafortablel == k)
                    table +=
                      " <option selected='true' value='" +
                      k +
                      "'>" +
                      k +
                      "</option>";
                  else
                    table += " <option  value='" + k + "'>" + k + "</option>";
                }
              }
              table += "</select></td>";
            } else if (i > j) {
              try {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[j].name && a.value2 == values[i].name
                  );
                })[0].delta;
              } catch {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[i].name && a.value2 == values[j].name
                  );
                })[0].delta;
                deltafortablel = 1 / deltafortablel;
              }
              table += "<td>" + fixNumber(deltafortablel) + "</td>";
            }
          }
          table += "</tr>";
        }
        table += "</table>";
        $("#table_results").append(table);
      }

      function drawChart(citeriaWeights) {
        $("#myChart").remove();
        $("#chart").append('<canvas id="myChart"></canvas>');
        var xValues = values.map((a) => a.name);
        var yValues = citeriaWeights;
        var barColors = [
          "#bae1ff",
          "#baffc9",
          "#ffffba",
          "#ffdfba",
          "#ffb3ba",
          "#0082e6",
          "#00cc2c",
        ];

        new Chart("myChart", {
          type: "doughnut",
          data: {
            labels: xValues,
            datasets: [
              {
                backgroundColor: barColors,
                data: yValues,
              },
            ],
          },
          options: {
            title: {
              display: true,
              text: "Citeria Weights",
            },
          },
        });
      }

      function drawConnections(matrix, old = null) {
        $("#connectionsChart").remove();
        $("#order").append('<canvas id="connectionsChart"></canvas>');

        var xValues = values.map((a) => a.name);
        let colors = [
          "#bae1ff",
          "#baffc9",
          "#ffffba",
          "#ffdfba",
          "#ffb3ba",
          "#0082e6",
          "#00cc2c",
        ];

        let shapes = ["circle", "rect", "rectRounded", "rectRot", "triangle"];

        datasets = values.map((value, index) => ({
          pointStyle: shapes[index % shapes.length],
          label: value.name,
          data: [],
          backgroundColor: colors[index],
        }));
        let counter = 1;
        for (let i = 0; i < matrix.length - 1; i++) {
          datasets[i].data.push({ x: counter, y: 0, r: 7 });
          let been = [0];
          for (let j = i + 1; j < matrix.length; j++) {
            let delta = matrix[i][j];
            if (delta < 1) delta = Math.round(1 / delta);
            else delta = delta == 1 ? 0 : -delta;
            let amount = been.filter((d) => d === delta).length;
            been.push(delta);
            datasets[j].data.push({
              x: counter + amount * 0.1,
              y: delta,
              r: old ? (old[i][j] != matrix[i][j] ? 11 : 7) : 7,
            });
          }
          counter++;
        }

        const data = {
          datasets,
        };

        const config = {
          type: "bubble",
          data: data,
          options: {
            animation: false,
            scales: {
              xAxes: [
                {
                  display: true,
                  ticks: {
                    beginAtZero: true,
                    stepSize: 1,
                    max: values.length,
                  },
                },
              ],
              yAxes: [
                {
                  display: true,
                  ticks: {
                    suggestedMin: -10,
                    stepSize: 1,
                    max: 10,
                  },
                },
              ],
            },
          },
        };
        console.log("config");

        console.log(config);
        new Chart("connectionsChart", config);
      }

      function drawCrOverTime(matrix) {
        $("#myChart").remove();
        $("#chart").append('<canvas id="myChart"></canvas>');

        var xValues = values.map((a) => a.name);
        let colors = [
          "#bae1ff",
          "#baffc9",
          "#ffffba",
          "#ffdfba",
          "#ffb3ba",
          "#0082e6",
          "#00cc2c",
        ];
        datasets = values.map((value, index) => ({
          type: "line",
          label: value.name,
          fill: false,
          data: [],
          borderColor: colors[index],
        }));

        datasets[values.length] = {
          type: "line",
          label: "CR",
          fill: false,
          data: [],
          borderColor: "#000",
        };

        let crBelow01 = -1;
        let crBelow01value = -1;
        let { cr, weights } = calculateConsistencyIndex(
          buildMatrix(connections),
          false,
          false,
          true
        );
        for (let i = 0; i < values.length; i++) {
          datasets[i].data.push(weights[i].toFixed(3));
        }
        datasets[values.length].data.push(cr);
        if (crBelow01 === -1 && cr < 0.1) {
          crBelow01 = 0;
          crBelow01value = cr;
        }
        for (currect_config of current_configs) {
          if (Array.isArray(currect_config.bestConfiguration)) {
            let { cr, weights } = calculateConsistencyIndex(
              currect_config.bestConfiguration,
              false,
              false,
              true
            );
            for (let i = 0; i < values.length; i++) {
              datasets[i].data.push(weights[i].toFixed(3));
            }
            datasets[values.length].data.push(cr);
            if (crBelow01 === -1 && cr < 0.1) {
              crBelow01 = datasets[values.length].data.length - 1;
              crBelow01value = cr;
            }
          }
        }

        datasets[values.length + 1] = {
          type: "bubble",
          label: "CR below 0.1",
          data: [{ x: crBelow01, y: crBelow01value, r: 10 }],
          backgroundColor: "#39FF14",
        };

        const data = {
          labels: Array.from(
            { length: current_configs.length },
            (_, index) => index
          ),
          datasets,
        };

        const config = {
          data: data,
          options: {
            animation: false,
            scales: {
              xAxes: [
                {
                  display: true,
                  ticks: {
                    beginAtZero: true,
                    stepSize: 1,
                    max: current_configs.length,
                  },
                },
              ],
              yAxes: [
                {
                  display: true,
                  ticks: {
                    suggestedMin: 0,
                  },
                },
              ],
            },
          },
        };
        console.log("configgggg");

        console.log(config);
        new Chart("myChart", config);
      }

      // for excel export
      function buildtableforexcel() {
        $(".excel").remove();
        var deltafortablel;
        var table = "";
        var id;
        table += "<table class='excel' style='display:none'>";
        table += "<tr>";
        table += "<td></td>";
        for (i = 0; i < values.length; i++)
          table +=
            "<td style='background:" +
            choosecolor(values[i].num - 1) +
            "'>" +
            values[i].name +
            "</td>";

        table += "</tr>";
        for (i = 0; i < values.length; i++) {
          table += "<tr>";
          table += "<td>" + values[i].name + "</td>";
          for (j = 0; j < values.length; j++) {
            if (i == j) table += "<td>1</td>";
            else if (i < j) {
              try {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[i].name && a.value2 == values[j].name
                  );
                })[0].delta;
              } catch {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[j].name && a.value2 == values[i].name
                  );
                })[0].delta;
                deltafortablel = 1 / deltafortablel;
              }

              id = values[i].id + "_" + values[j].id + "input";

              table += "<td>" + eval(deltafortablel) + "</td>";
            } else if (i > j) {
              try {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[j].name && a.value2 == values[i].name
                  );
                })[0].delta;
              } catch {
                deltafortablel = connections.filter(function (a) {
                  return (
                    a.value1 == values[i].name && a.value2 == values[j].name
                  );
                })[0].delta;
                deltafortablel = 1 / deltafortablel;
              }
              table += "<td>" + eval(fixNumber(deltafortablel)) + "</td>";
            }
          }
          table += "</tr>";
        }
        table += "</table>";
        $("#main").append(table);
      }
      function fixNumber(number) {
        var stringToReturn = "";
        if (number > 1) {
          stringToReturn += "1/";
          stringToReturn += number;
        } else if (number < 1 && number > 0) {
          stringToReturn = number / number / number;
        } else stringToReturn = number;
        return stringToReturn;
      }

      function fixNumberText(number) {
        var stringToReturn = "";
        if (number < 1 && number > 0) {
          stringToReturn += "1/";
          stringToReturn += number / number / number;
        } else stringToReturn = number;
        return stringToReturn;
      }

      function calculateConsistencyIndex(
        matrix,
        shouldDrawChart = false,
        shouldReturnAfterDrawing = false,
        returnCrAndWeights = false
      ) {
        // Step 1: Sum Column Check
        if (matrix.some((row) => row.includes(0))) {
          return null;
        }

        // Step 2: Sum Column Calculation
        const sumcolunm = calculateColumnSum(matrix);

        // Step 3: Pairwise Matrix Calculation
        const normalizedPairwiseMatrix = normalizePairwiseMatrix(
          matrix,
          sumcolunm
        );

        // Step 4: Criteria Weights Calculation
        const citeriaWeights = calculateCriteriaWeights(
          normalizedPairwiseMatrix
        );

        if (shouldDrawChart) {
          drawCrOverTime(citeriaWeights);
          if (shouldReturnAfterDrawing) return;
        }

        // Step 5: Weighted Sum Calculation
        const matrixandciteriaWeights = calculateWeightedSum(
          matrix,
          citeriaWeights
        );

        // Step 6: Weighted Sum Value / Criteria Weight Calculation
        const wsvAndCw = calculateWeightedSumDividedByCriteriaWeight(
          matrixandciteriaWeights,
          citeriaWeights
        );

        // Step 7: Consistency Index Calculation
        const consistencyIndex = calculateConsistencyIndexValue(
          wsvAndCw,
          values.length
        );

        console.log("Consistency Index (CI):", consistencyIndex);

        // Step 8: Consistency Ratio Calculation
        const consistecyRatio = consistencyIndex / returnRatio(values.length);
        if (returnCrAndWeights) {
          return { cr: consistecyRatio.toFixed(3), weights: citeriaWeights };
        }
        return consistecyRatio.toFixed(3);
      }

      function calculateColumnSum(matrix) {
        const size = matrix.length;

        sumcolunm = matrix.reduce(
          (columnSums, row) => row.map((value, j) => columnSums[j] + value),
          Array(size).fill(0)
        );
        console.log("sumcolunm:", sumcolunm);
        return sumcolunm;
      }

      function normalizePairwiseMatrix(pairwiseMatrix, sumcolunm) {
        const normalizedPairwiseMatrix = pairwiseMatrix.map((row, i) =>
          row.map((val, j) => parseFloat(val) / sumcolunm[j])
        );
        console.log("pairwisematrix:", normalizedPairwiseMatrix);
        return normalizedPairwiseMatrix;
      }

      function calculateCriteriaWeights(normalizedPairwiseMatrix) {
        const citeriaWeights = normalizedPairwiseMatrix.map(
          (row) =>
            row.reduce((sum, val) => sum + parseFloat(val), 0) /
            normalizedPairwiseMatrix.length
        );
        console.log("citeriaweights:", citeriaWeights);
        return citeriaWeights;
      }

      function calculateWeightedSum(matrix, citeriaWeights) {
        const matrixandciteriaWeights = matrix.map((row, i) =>
          row.map((val, j) => parseFloat(val) * citeriaWeights[j])
        );
        console.log("matrixandciteriaWeights:", matrixandciteriaWeights);
        return matrixandciteriaWeights;
      }

      function calculateWeightedSumDividedByCriteriaWeight(
        matrix,
        citeriaWeights
      ) {
        const wsv = matrix.map((row, i) =>
          row.reduce((sum, val, j) => sum + val, 0)
        );
        const wsvAndCw = wsv.map((w, i) => w / citeriaWeights[i]);
        console.log("weightedsumVal/citeriaweight:", wsvAndCw);
        return wsvAndCw;
      }

      function calculateConsistencyIndexValue(wsvAndCw, len) {
        const consistencyIndexValue =
          wsvAndCw.reduce((sum, val) => sum + val, 0) / len;
        const consistencyIndex = (consistencyIndexValue - len) / (len - 1);
        console.log("consistenytIndex:", consistencyIndex);
        return consistencyIndex;
      }

      function chooseStrategy(e) {
        max_moves = parseInt($("#strategy").val());
        refresh();
      }

      function adjustAHPTable(table, moves, currentMinCi, originalTable) {
        if (currentMinCi < 0.1) return true;
        let minCI = currentMinCi;
        let bestConfiguration = null;

        for (let i = 0; i < table.length - 1; i++) {
          for (let j = i + 1; j < table[i].length; j++) {
            const originalValue = table[i][j];
            const originalIntValue =
              originalTable[i][j] >= 1
                ? originalTable[i][j]
                : 1 / originalTable[i][j];
            if (i === 1 && j === 5)
              console.log("original value:" + originalIntValue);
            // Adjust by +1
            if (
              originalValue < 9 &&
              moves[i][j] < max_moves &&
              moves[i][j] < originalIntValue - 1
            ) {
              if (table[i][j] >= 1) {
                table[i][j] = originalValue + 1;
                table[j][i] = 1 / (originalValue + 1); // Reflect the change in the mirror cell
              } else {
                table[j][i] = 1 / originalValue - 1;
                table[i][j] = 1 / (1 / originalValue - 1); // Reflect the change in the mirror cell
              }

              const consistencyRatio = calculateConsistencyIndex(table);

              // Check if the new configuration yields a lower CI
              if (consistencyRatio < minCI) {
                minCI = consistencyRatio;
                bestConfiguration = JSON.parse(JSON.stringify(table));
              }

              // Reset values to original
              table[i][j] = originalValue;
              table[j][i] = 1 / originalValue;
            }

            // Adjust by -1
            if (
              originalValue > 1 &&
              moves[i][j] > -max_moves &&
              -moves[i][j] < originalIntValue - 1
            ) {
              if (table[i][j] >= 1) {
                table[i][j] = originalValue - 1;
                table[j][i] = 1 / (originalValue - 1); // Reflect the change in the mirror cell
              } else {
                table[j][i] = 1 / originalValue + 1;
                table[i][j] = 1 / (1 / originalValue + 1); // Reflect the change in the mirror cell
              }

              const consistencyRatio = calculateConsistencyIndex(table);

              // Check if the new configuration yields a lower CI
              if (consistencyRatio < minCI) {
                minCI = consistencyRatio;
                bestConfiguration = JSON.parse(JSON.stringify(table));
              }

              // Reset values to original
              table[i][j] = originalValue;
              table[j][i] = 1 / originalValue;
            }
          }
        }

        if (minCI < currentMinCi) {
          let change = findDifferentCell(table, bestConfiguration);
          let newMoves = JSON.parse(JSON.stringify(moves));
          newMoves[change.row][change.col] += change.diff;
          return { moves: newMoves, bestConfiguration, minCI };
        } else {
          return true;
        }
      }

      function findDifferentCell(matrix1, matrix2) {
        for (let i = 0; i < matrix1.length; i++) {
          for (let j = i + 1; j < matrix1[i].length; j++) {
            if (matrix1[i][j] !== matrix2[i][j]) {
              return {
                row: i,
                col: j,
                diff: matrix1[i][j] < matrix2[i][j] ? 1 : -1,
              };
            }
          }
        }

        return null; // Matrices are identical
      }

      //for normalization table
      function sumColunm(arrconnections) {
        //sumcolunm
        for (i = 0; i < arrconnections.length; i++)
          if (arrconnections[i].delta == 0) return 10;
        var sumcolunm = new Array();
        var matrix1 = matrixTable(arrconnections);
        let matrix = buildMatrix(arrconnections);

        if (values.length > 1)
          for (i = 0; i < values.length; i++) {
            sumcolunm.push(0);
            for (j = 0; j < values.length; j++)
              sumcolunm[i] += eval(matrix[j][i]);
          }

        console.log("sumcolunm:");
        console.log(sumcolunm);
        //pairwishmatrix

        var pairwisematrix = new Array(values.length);
        for (i = 0; i < values.length; i++)
          pairwisematrix[i] = new Array(values.length);
        for (i = 0; i < values.length; i++)
          for (j = 0; j < values.length; j++)
            pairwisematrix[j][i] = matrix[j][i] / sumcolunm[i];

        console.log("pairwisematrix:");
        console.log(pairwisematrix);
        var citeriaWeights = new Array(values.length);
        //citeriaweights
        for (i = 0; i < values.length; i++) {
          citeriaWeights[i] = 0;
          for (j = 0; j < values.length; j++)
            citeriaWeights[i] += eval(pairwisematrix[i][j]);
        }
        for (i = 0; i < values.length; i++)
          citeriaWeights[i] = citeriaWeights[i] / values.length;

        console.log("citeriaweights:");
        console.log(citeriaWeights);
        if (!citeriaWeights.includes(NaN)) drawCrOverTime(citeriaWeights);

        //weighted sum value
        var matrixandciteriaWeights = matrix.slice(0);
        for (i = 0; i < values.length; i++)
          for (j = 0; j < values.length; j++)
            matrixandciteriaWeights[j][i] =
              eval(matrixandciteriaWeights[j][i]) * eval(citeriaWeights[i]);
        console.log("matrixandciteriaWeights:");
        console.log(matrixandciteriaWeights);
        var weightedsumVal = new Array(values.length);
        for (i = 0; i < values.length; i++) {
          weightedsumVal[i] = 0;
          for (j = 0; j < values.length; j++)
            weightedsumVal[i] += matrixandciteriaWeights[i][j];
        }

        console.log("weightedsumVal:");
        console.log(weightedsumVal);
        //weightedsumval / citeriaweight
        var wsvAndCw = weightedsumVal.slice(0);

        for (i = 0; i < values.length; i++)
          wsvAndCw[i] = weightedsumVal[i] / citeriaWeights[i];
        console.log("weightedsumVal/citeriaweight:");
        console.log(wsvAndCw);

        //consistency index
        var consistencyIndex = 0;
        for (i = 0; i < values.length; i++) consistencyIndex += wsvAndCw[i];
        consistencyIndex = consistencyIndex / values.length;
        consistencyIndex =
          (consistencyIndex - values.length) / (values.length - 1);
        console.log("consistenytIndex:");
        console.log(consistencyIndex);
        console.log("new function");
        console.log(calculateConsistencyIndex(buildMatrix(arrconnections)));
        //consistency ratio
        var consistecyratio = consistencyIndex / returnRatio(values.length);
        console.log("consistecyratio:");
        console.log(consistecyratio);
        if (arrconnections == connections) {
          console.log("whhy");
        }
        return consistecyratio;
      }
      function minRatio() {
        var moves = 0;
        var moved = [];
        output = [[]];
        for (i = 0; i < connections.length; i++) {
          output[0][i] = 0;
        }
        var tryRatio1 = [];
        connectionsCloned = structuredClone(connections);
        while (tryRatio1.length == 0 && moves < connections.length) {
          var tryRatio = new Array(values.length * 2);
          var m = 0;
          for (m = 0; m < connectionsCloned.length; m++) {
            if (!moved.includes(m)) {
              tryRatio[m * 2] = sumColunm(addTo(connectionsCloned, m, 1));
              tryRatio[m * 2 + 1] = sumColunm(addTo(connectionsCloned, m, -1));
            } else {
              tryRatio[m * 2] = 10;
              tryRatio[m * 2 + 1] = 10;
            }
          }

          console.log("ratio are:");
          console.log(tryRatio);

          var minInThisCycle = Math.min(...tryRatio);
          var minInThisCycleId = tryRatio.indexOf(minInThisCycle);
          var connectionId = Math.floor(minInThisCycleId / 2);
          var plusOrMinus = minInThisCycleId % 2 === 0 ? 1 : -1;
          moved.push(connectionId);
          moves++;
          output[0][connectionId] = plusOrMinus;
          tryRatio1 = tryRatio.filter(function (a) {
            return eval(a) >= 0 && eval(a) < 0.1;
          });
          if (tryRatio1.length == 0) {
            connectionsCloned = addTo(
              connectionsCloned,
              connectionId,
              plusOrMinus
            );
          }
        }
        var minimum = Math.min(...tryRatio1);
        minid = tryRatio.indexOf(minimum);

        console.log("minimum: " + minimum);
        var change = "";
        var currentci = eval($("#ci").text().toString().substring(10));
        $("#changeall").remove();
        if (
          currentci > 0.1 &&
          minimum < currentci &&
          minimum >= 0 &&
          connections.filter(function (a) {
            return a.delta == 0;
          }).length == 0
        ) {
          change =
            "<a id='changeall' class='button'>Improve CI to : " +
            minimum.toString().substring(0, 10) +
            "</a>";
          minallid = 0;
        } else if (minid == -1 && currentci > 0) {
          change =
            "<p id='changeall'>Sorry we can't lower the CI (under 0.1) with 1 move :(</p>";
          minallid = -1;
        }
        $("#main").append(change);
      }
      function addTo(arr, place, num) {
        var newarray = [...arr].map((i) => ({ ...i }));

        newarray[place].delta = eval(newarray[place].delta) + eval(num);
        return newarray;
      }
      function minRatioAll() {
        var tryRatio = new Array(Math.pow(3, values.length));
        var arrayCombinations = [0, -1, 1];
        output = [];
        var papersNo = connections.length;
        Util.getAllPossibleRPermuts(arrayCombinations, papersNo, output);
        var m = 0;
        for (m = 0; m < output.length; m++) {
          tryRatio[m] = sumColunm(addToMulti(connections, output[m]));
        }
        console.log("ratio all are:");
        console.log(tryRatio);
        tryRatio1 = tryRatio.filter(function (a) {
          return eval(a) >= 0 && eval(a) < 0.1;
        });
        var minimum = Math.min(...tryRatio1);
        minallid = tryRatio.indexOf(minimum);
        console.log("minimumall: " + minimum);
        var change = "";
        var currentci = eval($("#ci").text().toString().substring(6));

        if (minimum < currentci && minimum >= 0)
          change =
            "<a id='changeall' class='button'>Improve CI to : " +
            minimum.toString().substring(0, 5) +
            "</a>";
        else if (minid == -1 && currentci > 0)
          change =
            "<p id='changeall'>Sorry we can't lower the CI (under 0.1) with 1 move :(</p>";
        $("#main").append(change);
      }

      function addToMulti(arr, places) {
        var newarray = [...arr].map((i) => ({ ...i }));
        for (i = 0; i < places.length; i++)
          newarray[i].delta = eval(newarray[i].delta) + eval(places[i]);
        return newarray;
      }

      function returnRatio(num) {
        if (num == 1) return 0;
        if (num == 2) return 0;
        if (num == 3) return 0.58;
        if (num == 4) return 0.9;
        if (num == 5) return 1.12;
        if (num == 6) return 1.24;
        if (num == 7) return 1.32;
      }

      function refresh(undo = false) {
        $("#myChart").remove();
        $("#connectionsChart").remove();
        $("#ciTable").remove();
        $("svg").remove();
        $(".buttons").remove();
        if (undo) {
          connectionsNew = JSON.parse(localStorage.getItem("connections"));
          valuesNew = JSON.parse(localStorage.getItem("values"));
          if (connectionsNew.length === 0 && valuesNew.length === 0) {
            alert("Nothing to undo");
          } else {
            connections = connectionsNew;
            values = valuesNew;
          }
        }
        buildtable();
        const matrix = buildMatrix(connections);
        let consistecyratio = calculateConsistencyIndex(matrix, false);
        $("#ci").remove();
        if (consistecyratio && consistecyratio >= 0 && consistecyratio < 0.1)
          $("#main").append(
            "<p id='ci'>CR : " +
              consistecyratio.toString().substring(0, 10) +
              "</p>"
          );
        else if (consistecyratio > 0.1)
          $("#main").append(
            "<p id='ci' class='redback'>CR : " +
              consistecyratio.toString().substring(0, 10) +
              "</p>"
          );

        if (
          !connections.filter(function (a) {
            return a.delta == 0;
          }).length > 0
        ) {
          let matrix = buildMatrix(connections);
          //drawConnections(matrix);
          configs = [];
          let moves = createZeroMatrix(values.length);
          let newConfig = adjustAHPTable(
            matrix,
            moves,
            consistecyratio,
            matrix
          );
          configs.push(newConfig);
          if (newConfig !== true) {
            for (let i = 1; i < 100; i++) {
              let newConfig = adjustAHPTable(
                configs[i - 1].bestConfiguration,
                configs[i - 1].moves,
                configs[i - 1].minCI,
                matrix
              );
              configs.push(newConfig);
              if (newConfig === true) break;
            }
          }
          console.log(configs);
          current_configs = configs;
          current_matrix = matrix;
          createTable(configs);
          drawCrOverTime();
        }
      }

      function createTable(data) {
        const table = document.createElement("table");
        table.setAttribute("id", "ciTable");
        const thead = document.createElement("thead");
        const tbody = document.createElement("tbody");

        // Create table header
        const headerRow = document.createElement("tr");
        const movesHeader = document.createElement("th");
        movesHeader.textContent = "#Moves";
        headerRow.appendChild(movesHeader);

        const ciHeader = document.createElement("th");
        ciHeader.textContent = "CR";
        headerRow.appendChild(ciHeader);

        const useHeader = document.createElement("th");
        useHeader.textContent = "Use";
        headerRow.appendChild(useHeader);

        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Create table body
        data.forEach((obj, index) => {
          if (obj === true) return;
          const row = document.createElement("tr");

          // Moves column
          const movesCell = document.createElement("td");
          movesCell.textContent = index + 1;
          row.appendChild(movesCell);

          // CI column
          const ciCell = document.createElement("td");
          ciCell.textContent = obj.minCI.toString().substring(0, 9);
          row.appendChild(ciCell);

          // Use column (button)
          const useCell = document.createElement("td");
          const useButton = document.createElement("button");
          useButton.textContent = "Use";
          useButton.addEventListener("click", () => {
            // Add your click event handling logic here
            console.log(`Button clicked for row ${index + 1}`);
            applyChange(obj.moves);
          });

          useButton.addEventListener("mouseenter", () => {
            // Add your hover event handling logic here
            console.log(`Mouseenter on row ${index + 1}`);
            showFutureChange(obj.moves);
          });

          useButton.addEventListener("mouseleave", () => {
            // Add your hover event handling logic here
            console.log(`mouseleave on row ${index + 1}`);
            showFutureChange(obj.moves, false);
          });

          useCell.appendChild(useButton);
          row.appendChild(useCell);

          tbody.appendChild(row);
        });

        table.appendChild(tbody);

        $("#ciDiv").append(table);
      }

      function showFutureChange(moves, on = true) {
        if (!on) {
          refresh();
          return;
        }

        let matrix = buildMatrix(connections);
        let copy = JSON.parse(JSON.stringify(matrix));
        if (on) {
          for (let i = 0; i < matrix.length; i++) {
            for (let j = i + 1; j < matrix.length; j++) {
              if (matrix[i][j] >= 1) {
                matrix[i][j] += moves[i][j];
              } else {
                matrix[i][j] = 1 / (1 / matrix[i][j] - moves[i][j]);
              }
            }
          }
        }
        //drawConnections(matrix, copy);
        calculateConsistencyIndex(matrix, true, true);
        for (let i = 0; i < moves.length; i++) {
          for (let j = i + 1; j < moves.length; j++) {
            if (moves[i][j] != 0) {
              const diff = on ? moves[i][j] : -1 * moves[i][j];
              const selector = values[i].name + "_" + values[j].name + "input";
              let val = $("#" + selector).val();
              if (val.toString().includes("/")) {
                newVal = parseInt(val.split("/")[1]) - diff;
                if (newVal === 1) {
                  $("#" + selector).val(1);
                } else {
                  $("#" + selector).val("1/" + newVal.toString());
                }
              } else {
                $("#" + selector).val(parseInt(val) + diff);
              }
              $("#" + selector).css(
                "background",
                on ? (Math.abs(diff) > 1 ? "aqua" : "yellow") : "#f1f1f1"
              );
            }
          }
        }
      }

      function applyChange(moves) {
        Util.storeLastMove();
        for (let i = 0; i < moves.length; i++) {
          for (let j = i + 1; j < moves.length; j++) {
            if (moves[i][j] != 0) {
              const diff = moves[i][j];
              const selector = values[i].name + "_" + values[j].name + "input";
              let con = connections.filter((c) => c.input === selector)[0];
              if (con) {
                if(con.value1 === values[i].name) con.delta = parseInt(con.delta) + diff;
                else con.delta = parseInt(con.delta) - diff;
              }
              if (!con) {
                const selector =
                  values[j].name + "_" + values[i].name + "input";
                con = connections.filter((c) => c.input === selector)[0];
                con.delta = parseInt(con.delta) - diff;
              }
              refresh();
            }
          }
        }
      }

      function createZeroMatrix(size) {
        return Array.from({ length: size }, () => Array(size).fill(0));
      }

      function buildMatrix(connections) {
        let res = create2DArray(values.length);
        for (let value of values) {
          res[value.num - 1][value.num - 1] = 1;
          let valueConnections = connections.filter(
            (c) => c.value1 === value.name
          );
          for (let connection of valueConnections) {
            res[value.num - 1][getValueByName(connection.value2).num - 1] =
              parseInt(connection.delta);
            res[getValueByName(connection.value2).num - 1][value.num - 1] =
              1 / parseInt(connection.delta);
          }
        }
        console.log(res);
        return res;
      }

      function getValueByName(name) {
        return values.filter((v) => v.name === name)[0];
      }

      function create2DArray(n) {
        const array = [];

        for (let i = 0; i < n; i++) {
          array[i] = []; // Create an empty array at each index

          for (let j = 0; j < n; j++) {
            array[i][j] = 0; // Fill each element with a default value (in this case, 0)
          }
        }

        return array;
      }

      function download(filename, text) {
        var element = document.createElement("a");
        element.setAttribute(
          "href",
          "data:text/plain;charset=utf-8," + encodeURIComponent(text)
        );
        element.setAttribute("download", filename);

        element.style.display = "none";
        document.body.appendChild(element);

        element.click();

        document.body.removeChild(element);
      }

      // Function to convert array to CSV
      function arrayToCSV(dataArray) {
        const bom = "\uFEFF";
        let weightsAndCr = [[""]].concat(values.map((val) => [val.name]));
        weightsAndCr.push(["CR"]);
        let counterForSummary = 1;
        let header = values.map((val) => val.name).join(",");
        header = "," + header + "\n";
        let { cr, weights } = calculateConsistencyIndex(
          current_matrix,
          false,
          false,
          true
        );
        weightsAndCr[0].push(counterForSummary);
        counterForSummary++;
        for (let i = 0; i < values.length; i++) {
          weightsAndCr[i + 1].push(weights[i].toFixed(3));
        }
        weightsAndCr[values.length + 1].push(cr);
        let csvContent =
          header +
          current_matrix
            .map(
              (row, index) =>
                values[index].name +
                "," +
                row.join(",") +
                "," +
                weights[index].toFixed(3)
            )
            .join("\n");
        csvContent += `\n${",".repeat(values.length)}CR:,${cr}`;
        for (let config of current_configs) {
          if (Array.isArray(config.bestConfiguration)) {
            let { cr, weights } = calculateConsistencyIndex(
              config.bestConfiguration,
              false,
              false,
              true
            );
            weightsAndCr[0].push(counterForSummary);
            counterForSummary++;
            for (let i = 0; i < values.length; i++) {
              weightsAndCr[i + 1].push(weights[i].toFixed(3));
            }
            weightsAndCr[values.length + 1].push(cr);
            csvContent +=
              "\n\n" +
              header +
              config.bestConfiguration
                .map(
                  (row, index) =>
                    values[index].name +
                    "," +
                    row.join(",") +
                    "," +
                    weights[index].toFixed(3)
                )
                .join("\n");
            csvContent += `\n${",".repeat(values.length)}CR:,${cr}`;
          }
        }

        // add last table
        csvContent += "\n\nSummary:\n";

        csvContent += weightsAndCr
          .map((row, index) => row.join(","))
          .join("\n");
        return bom + csvContent;
      }

      // Function to download CSV
      function downloadCSV() {
        const csvData = arrayToCSV();
        const blob = new Blob([csvData], { type: "text/csv;charset=utf-8" });

        const link = document.createElement("a");
        link.href = window.URL.createObjectURL(blob);
        link.download = "data.csv";

        // Append the link to the document and trigger a click event
        document.body.appendChild(link);
        link.click();

        // Remove the link from the document
        document.body.removeChild(link);
      }
    </script>
    <link href="Css/lightbox.css" rel="stylesheet" />
    <style type="text/css">
      a {
        text-decoration: none;
      }
      select {
        border: none;
        border-radius: 4px;
        background-color: #f1f1f1;
      }

      .redback {
        background: #ff9494 !important;
      }

      .cons {
        direction: ltr;
      }

      #ci {
        direction: ltr;
        padding: 10px;
        width: fit-content;
        border-radius: 10px;
        background: white;
      }

      #changeall {
        direction: ltr;
      }

      .normal {
        direction: ltr;
        position: fixed;
        right: 50px;
        top: 100px;
      }

      .tableresults table,
      td {
        border: 1px solid #ddd;
        text-align: center;
      }

      .tableresults table {
        width: 100%;
      }

      table {
        border-collapse: collapse !important;
        font-size: small;
      }

      .tableresults td {
        height: 75px;
        width: 75px;
        background-color: white;
      }

      a {
        cursor: pointer;
      }

      .redd {
        fill: Red;
      }

      svg {
        top: 0;
        left: 0;
        position: fixed;
        height: 100%;
        width: 100%;
        z-index: -100;
      }

      body {
        font-family: tahoma;
        font-size: large;
        /*background-image: url("images/back.jpg");*/
        background-size: cover;
        margin: 30px;
      }

      #addvals {
        vertical-align: middle;
      }

      #box {
        width: 50vw;
        height: 50vh;
        border: 1px solid gray;
        border-radius: 10px;
        top: 50%;
        left: 50%;
        position: fixed;
        transform: translate(-50%, -50%);
      }

      .txtarea {
        resize: none;
        direction: rtl;
        font-family: tahoma;
        width: 5vw;
        text-align: center;
        margin: 0, 2vw, 0, 2vw;
      }

      input[type="text"] {
        background: transparent;
        border: none;
        border-bottom: 1px solid #ddd;
        width: 30px;
        font-family: tahoma;
        font-size: large;
        text-align: center;
      }

      input[type="text"]:focus {
        text-align: center;
        background: transparent;
        border: none;
        border-bottom: 1px solid rgb(77, 144, 254);
        width: 30px;
        font-family: tahoma;
        font-size: large;
        outline-color: transparent;
      }

      .button {
        padding: 15px;
        border-radius: 10px;
        background-color: #bae1ff;
        box-shadow: 0 0 7px #b9b5b5;
      }

      .button:hover {
        box-shadow: 0 0 7px rgb(77, 144, 254);
        cursor: pointer;
      }

      #main {
        width: 100%;
        margin-top: 20px;
        display: inline-grid;
        justify-content: center;
      }

      #flextop {
        display: flex;
        justify-content: center;
      }

      .flex-container {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
      }

      .flex-item {
        flex: 1 0 calc(25% - 10px); /* 25% width with 10px gap */
        min-width: 100px; /* Minimum width for each column */
        background-color: #ddd;
        padding: 10px;
        box-sizing: border-box;
      }

      #menu {
        text-align: center;
      }

      #logo {
        transition-duration: 0.5s;
        border-radius: 20px;
        box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.25);
      }

      #logo:hover {
        box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.5);
        cursor: pointer;
      }

      .menuitem {
        transition-duration: 0.2s;
        margin: 15px;
        height: 40px;
        width: 40px;
      }
      .menuitem:hover {
        outline: 2px solid #e4e4e4;
        outline-offset: 10px;
        cursor: pointer;
      }

      #myChart {
        background-color: white;
      }

      #connectionsChart {
        background-color: white;
      }

      .array-illustration {
        display: flex;
        gap: 10px;
      }

      .inner-array {
        display: flex;
        flex-direction: column;
        gap: 10px;
        align-items: center;
      }

      .item {
        width: 100%;
        height: 45px;
        background-color: #ddd;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        border: 1px solid #ccc;
        text-align: center;
      }

      .modal {
        display: none; /* Hidden by default */
        position: fixed; /* Stay in place */
        z-index: 1; /* Sit on top */
        padding-top: 100px; /* Location of the box */
        left: 0;
        top: 0;
        width: 100%; /* Full width */
        height: 100%; /* Full height */
        overflow: auto; /* Enable scroll if needed */
        background-color: rgb(0, 0, 0); /* Fallback color */
        background-color: rgba(0, 0, 0, 0.4); /* Black w/ opacity */
      }

      /* Modal Content */
      .modal-content {
        background-color: #fefefe;
        margin: auto;
        padding: 20px;
        border: 1px solid #888;
        width: 55%;
      }

      /* The Close Button */
      .close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }

      .close:hover,
      .close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
      }

      #ciTable {
        background: white;
      }

      .parent {
        display: grid;
        grid-template-columns: repeat(2, 1fr) 0.2fr repeat(2, 1fr) 0.2fr 0.5fr;
        grid-template-rows: repeat(2, 1fr);
        grid-column-gap: 0px;
        grid-row-gap: 0px;
      }

      .div1 {
        grid-area: 1 / 1 / 3 / 3;
      }
      .div3 {
        grid-area: 1 / 4 / 3 / 6;
      }
      .div4 {
        grid-area: 1 / 7 / 3 / 8;
      }
    </style>
  </head>

  <body>
    <p style="font-size: x-small">v2 Omer Hadar March 23</p>
    <div id="menu">
      <a href="images/Ahp.png" data-lightbox="logo" data-title=""
        ><img id="logo" src="images/logo.jpg" height="120px" width="auto"
      /></a>
      <br />
      <a href="images/Table.png" data-lightbox="table" data-title="">
        <img class="menuitem" src="images/doc.png" title="Hierarach Table" />
      </a>
      <input
        type="file"
        accept="text/csv"
        id="fileInput"
        style="display: none"
      />
      <label for="fileInput">
        <img
          class="menuitem"
          src="images/upload.png"
          alt="Upload"
          title="Upload"
          width="20"
          height="20"
        />
      </label>
      <img
        id="dwn-btn"
        class="menuitem"
        src="images/download.png"
        title="Export To Excel"
      />
      <img id="reset" class="menuitem" src="images/trash.png" title="Reset" />
      <img id="undo" class="menuitem" src="images/undo.png" title="Undo" />
      <img id="save" class="menuitem" src="images/save.png" title="Save" />
      <img
        id="restore"
        class="menuitem"
        src="images/restore.png"
        title="Restore"
      />
      <img
        id="export"
        class="menuitem"
        src="images/package.png"
        title="Export and Import"
      />
    </div>

    <div id="main">
      <div id="flextop">
        <textarea class="txtarea" id="firstval" placeholder="Value"></textarea>

        <a
          id="addval"
          style="display: inline-block; margin-left: 25px; margin-right: 25px"
          class="addvals button"
          >Add</a
        >
        <select id="strategy" onchange="chooseStrategy(event)">
          <option selected="true" value="2">Max 2 moves for cell</option>
          <option value="1">Max 1 move for cell</option>
          <option value="9">Unlimited moves for cell</option>
        </select>
      </div>
    </div>
    <div class="parent">
      <div id="table_results" class="div1"></div>

      <div id="chart" class="div3"></div>
      <div id="ciDiv" class="div4"></div>
    </div>
    <div id="myModal" class="modal">
      <div class="modal-content">
        <span class="close">&times;</span>
        <div
          style="display: flex; justify-content: center"
          id="modal-data"
        ></div>
      </div>
    </div>

    <br />
    <br />

    <script src="Scripts/lightbox.js"></script>
    <script>
      var modal = document.getElementById("myModal");

      var restore = document.getElementById("restore");
      var exportData = document.getElementById("export");
      var save = document.getElementById("save");

      var span = document.getElementsByClassName("close")[0];

      function restoreMe() {
        Util.restore($("#projects").val());
      }

      function deleteName() {
        Util.deleteName($("#projects").val());
        alert("Deleted! :)");
        $("#restore").click();
      }

      function deleteAll() {
        localStorage.clear();
        $("#restore").click();
      }

      restore.onclick = function () {
        $("#modal-data").empty();
        var arr = Util.getNames();
        if (!arr) arr = [];
        if (arr.length == 0) {
          $("#modal-data").append("You didn't save anything yet :(");
        } else {
          let selectList = `<select id="projects" style="width:250px">`;
          arr.forEach((element) => {
            selectList += `<option value="${element}">${element}</option>`;
          });
          selectList += `</select>`;
          $("#modal-data").append(selectList);
          $("#modal-data").append(
            `<a
          onclick="restoreMe()"
          style="display: inline-block; margin-left: 25px"
          class="button"
          >Restore </a>`
          );
          $("#modal-data").append(
            `<a
          onclick="deleteName()"
          style="display: inline-block; margin-left: 25px; background-color:#ff9494"
          class="button"
          >Delete </a
        >
        <a
          onclick="deleteAll()"
          style="display: inline-block; margin-left: 25px; background-color:#ff9494"
          class="button"
          >Delete All</a
        >`
          );
        }
        modal.style.display = "block";
      };

      exportData.onclick = function () {
        $("#modal-data").empty();

        $("#modal-data").append(
          `<a
          onclick="restoreFile()"
          style="display: inline-block; margin-left: 25px"
          class="button"
          >Upload Simulations</a>`
        );
        $("#modal-data").append(
          `<a
          onclick="exportFile()"
          style="display: inline-block; margin-left: 25px"
          class="button"
          >Export Simulations</a>`
        );
        modal.style.display = "block";
      };

      // write function to export the data from local storage to json file
      function exportFile() {
        let names = Util.getNames();
        if (!names) names = [];
        let data = {};
        names.forEach((name) => {
          data[name] = {
            connections: JSON.parse(
              localStorage.getItem(name + "_connections")
            ),
            values: JSON.parse(localStorage.getItem(name + "_values")),
          };
        });
        download("data.json", JSON.stringify(data));
      }

      // write function to restore the data from json file to local storage
      function restoreFile() {
        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = ".json";
        fileInput.onchange = function (e) {
          const file = e.target.files[0];
          const reader = new FileReader();
          reader.onload = function (e) {
            const data = JSON.parse(e.target.result);
            Object.keys(data).forEach((name) => {
              localStorage.setItem(
                name + "_connections",
                JSON.stringify(data[name].connections)
              );
              localStorage.setItem(
                name + "_values",
                JSON.stringify(data[name].values)
              );
              let names = Util.getNames();
              if (!names) names = [];
              if (!names.includes(name)) {
                names.push(name);
                Util.setNames(names);
              }
            });
            alert("Restored! :)");
          };
          reader.readAsText(file);
        };
        fileInput.click();
      }

      function saveData() {
        var name = $("#saveName").val();
        if (name == "") {
          alert("Please enter a name");
        } else {
          Util.store(name);

          let names = Util.getNames();
          if (!names) names = [];
          if (!names.includes(name)) {
            names.push(name);
            Util.setNames(names);
          }
          alert("Saved! :)");
        }
      }

      save.onclick = function () {
        $("#modal-data").empty();
        var arr = Util.getNames();
        $("#modal-data").append(`<textarea
          class="txtarea"
          id="saveName"
          placeholder="Name"
        ></textarea>`);
        $("#modal-data").append(
          `<a
          onclick="saveData()"
          style="display: inline-block; margin-left: 25px"
          class="addvals button"
          >Save </a
        >`
        );

        modal.style.display = "block";
      };

      // When the user clicks on <span> (x), close the modal
      span.onclick = function () {
        modal.style.display = "none";
      };

      // When the user clicks anywhere outside of the modal, close it
      window.onclick = function (event) {
        if (event.target == modal) {
          modal.style.display = "none";
        }
      };

      const fileInput = document.getElementById("fileInput");

      fileInput.addEventListener("change", handleFile);

      function handleFile(event) {
        const file = event.target.files[0];

        if (file) {
          const reader = new FileReader();

          reader.onload = function (e) {
            const fileContent = e.target.result;

            // Explicitly specify UTF-8 encoding during the decoding process
            const utf8Content = new TextDecoder("utf-8").decode(fileContent);

            // Split the CSV content into rows and then split each row into an array
            const csvRows = utf8Content.split("\n");
            const csvArray = csvRows.map((row) => row.split(","));

            // Now 'csvArray' contains the UTF-8 encoded CSV data as a 2D array
            let csvTable = csvArray.map((row) =>
              row.map((str) => str.replace(/[\r\n\t]/g, ""))
            );
            console.log(csvTable);
            let tableSize = csvTable[0].length;
            let counter = 0;
            for (let i = 0; i < csvTable.length; i += 1 + tableSize) {
              handleTable(csvTable.slice(i, i + tableSize), counter);
              counter++;
            }
          };

          reader.readAsArrayBuffer(file);
        }
      }

      function handleTable(table, counter) {
        let name = [" ", ""].includes(table[0][0])
          ? `table_${counter}`
          : table[0][0];
        let values = [];
        let connections = [];

        for (let i = 1; i < table.length; i++) {
          table[i][0] = table[0][i] = table[0][i].split(" ").join("-");
          let id = table[0][i];
          let name = id;
          let value = 0;
          let num = i;
          values.push({ id, name, value, num });
        }

        for (let i = 1; i < table.length; i++) {
          for (let j = i + 1; j < table.length; j++) {
            let delta = parseFloat(table[i][j]);
            let value1 = delta >= 1 ? table[0][i] : table[j][0];
            let value2 = delta >= 1 ? table[j][0] : table[0][i];
            let mode = "regular";
            let input = `${value1}_${value2}input`;
            delta = delta > 1 ? delta : Math.round(1 / delta);
            connections.push({ value1, value2, delta, mode, input });
          }
        }
        localStorage.setItem(
          name + "_connections",
          JSON.stringify(connections)
        );
        localStorage.setItem(name + "_values", JSON.stringify(values));

        let names = Util.getNames();
        if (!names) names = [];
        if (!names.includes(name)) {
          names.push(name);
          Util.setNames(names);
        }
      }
    </script>
  </body>
</html>
